/("[^"]+")+|('[^']+')+/
{ return STRING_LITERAL }
/[0-9]+/
{ return INTEGER_LITERAL }
/\.[0-9]+|[0-9]+\.[0-9]*/
{ return DECIMAL_LITERAL }
/(\.[0-9]+|[0-9]+\.[0-9]*)[Ee][+-]?[0-9]+/
{ return DOUBLE_LITERAL }
/or/
{ return OR }
/and/
{ return AND }
/idiv/
{ return INTEGER_DIVIDE }
/div/
{ return DIVIDE }
/mod/
{ return MODULUS }
/eq/
{ return VEQ }
/ne/
{ return VNE }
/lt/
{ return VLT }
/le/
{ return VLE }
/gt/
{ return VGT }
/ge/
{ return VGE }
/is/
{ return IS }
/union/
{ return UNION }
/file/
{ return FILE }
/dir/
{ return DIR }
/to/
{ return TO }
/::/
{ return AXIS }
/[a-zA-Z_][a-zA-Z_.-]*/
{ return QNAME }
/[ \t\r\n]+/
{ /* skip WS */ }
/$/
{ return DOLLAR }
/\(/
{ return LPAREN }
/\)/
{ return RPAREN }
/\[/
{ return LBRACKET }
/\]/
{ return RBRACKET }
/,/
{ return COMMA }
/\+/
{ return PLUS }
/-/
{ return MINUS }
/\*/
{ return MULTIPLY }
/\//
{ return SLASH }
/=/
{ return GEQ }
/!=/
{ return GNE }
/</
{ return GLT }
/<=/
{ return GLE }
/>/
{ return GGT }
/>=/
{ return GGE }
/\|/
{ return UNIONSYM }
/@/
{ return ATTR }
/\.\./
{ return DOTDOT }
/\./
{ return DOT }
//
package main;
import (
    "errors"
)

var parserResult *ParseTree

func Parse(input io.Reader) (*ParseTree, error) {
    lexer := NewLexer(input)
    if yyParse(lexer) != 0 {
        return nil, errors.New("Parse error.")
    }
    return parserResult, nil
}

func ParseString(input string) (*ParseTree, error) {
    reader := strings.NewReader(input)
    return Parse(reader)
}